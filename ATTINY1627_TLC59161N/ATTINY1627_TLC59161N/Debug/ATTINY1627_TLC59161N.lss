
ATTINY1627_TLC59161N.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00803800  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080382e  0080382e  00000ec2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b70  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002642  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a67  00000000  00000000  0000945e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  0000aec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023e2  00000000  00000000  0000b508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e74  00000000  00000000  0000d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000e75e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_8>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_15>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  6c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  70:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_copy_data>:
  84:	18 e3       	ldi	r17, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	e0 e0       	ldi	r30, 0x00	; 0
  8c:	fe e0       	ldi	r31, 0x0E	; 14
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	28 e3       	ldi	r18, 0x38	; 56
  9c:	ae e2       	ldi	r26, 0x2E	; 46
  9e:	b8 e3       	ldi	r27, 0x38	; 56
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ab 36       	cpi	r26, 0x6B	; 107
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  ae:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  b6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <system_init>
  ba:	08 95       	ret

000000bc <i2c_send>:
		
	}
}

void i2c_send(char p) {
	I2C_0_open(p);
  bc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <I2C_0_open>
	//I2C_0_set_buffer(values, 1);
	//I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
	I2C_0_master_write();
  c0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <I2C_0_master_write>
	I2C_0_close();
  c4:	0e 94 9a 04 	call	0x934	; 0x934 <I2C_0_close>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
  c8:	89 b1       	in	r24, 0x09	; 9
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	89 b9       	out	0x09, r24	; 9
  ce:	08 95       	ret

000000d0 <send>:
	SDI_set_level(false);
}

void send(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
  d0:	20 e0       	ldi	r18, 0x00	; 0
	I2C_0_close();
	SDI_set_level(false);
}

void send(char p) {
	char bitMask = 1;
  d2:	31 e0       	ldi	r19, 0x01	; 1
	for(char i = 0; i < 8; i++) {
  d4:	12 c0       	rjmp	.+36     	; 0xfa <send+0x2a>
		SDI_set_level((p & bitMask) > 0);
  d6:	93 2f       	mov	r25, r19
  d8:	98 23       	and	r25, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
  da:	21 f0       	breq	.+8      	; 0xe4 <send+0x14>
		VPORTC.OUT |= (1 << pin);
  dc:	99 b1       	in	r25, 0x09	; 9
  de:	98 60       	ori	r25, 0x08	; 8
  e0:	99 b9       	out	0x09, r25	; 9
  e2:	03 c0       	rjmp	.+6      	; 0xea <send+0x1a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
  e4:	99 b1       	in	r25, 0x09	; 9
  e6:	97 7f       	andi	r25, 0xF7	; 247
  e8:	99 b9       	out	0x09, r25	; 9
		bitMask = bitMask << 1;
  ea:	33 0f       	add	r19, r19
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
  ec:	99 b1       	in	r25, 0x09	; 9
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	99 b9       	out	0x09, r25	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
  f2:	99 b1       	in	r25, 0x09	; 9
  f4:	9e 7f       	andi	r25, 0xFE	; 254
  f6:	99 b9       	out	0x09, r25	; 9
	SDI_set_level(false);
}

void send(char p) {
	char bitMask = 1;
	for(char i = 0; i < 8; i++) {
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	28 30       	cpi	r18, 0x08	; 8
  fc:	60 f3       	brcs	.-40     	; 0xd6 <send+0x6>
  fe:	89 b1       	in	r24, 0x09	; 9
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	89 b9       	out	0x09, r24	; 9
 104:	08 95       	ret

00000106 <latch>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 106:	89 b1       	in	r24, 0x09	; 9
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	89 b9       	out	0x09, r24	; 9
	} else {
		VPORTC.OUT &= ~(1 << pin);
 10c:	89 b1       	in	r24, 0x09	; 9
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	89 b9       	out	0x09, r24	; 9
 112:	08 95       	ret

00000114 <enableOutput>:
 114:	89 b1       	in	r24, 0x09	; 9
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	89 b9       	out	0x09, r24	; 9
 11a:	08 95       	ret

0000011c <disableOutput>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	89 b9       	out	0x09, r24	; 9
 122:	08 95       	ret

00000124 <load>:
	OE_set_level(false);
}
void disableOutput() {
	OE_set_level(true);
}
void load(char p) {
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	disableOutput();
 128:	0e 94 8e 00 	call	0x11c	; 0x11c <disableOutput>
	send(p);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 68 00 	call	0xd0	; 0xd0 <send>
	latch();
 132:	0e 94 83 00 	call	0x106	; 0x106 <latch>
	enableOutput();
 136:	0e 94 8a 00 	call	0x114	; 0x114 <enableOutput>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:
adc_result_t reading;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 13e:	0e 94 5b 00 	call	0xb6	; 0xb6 <atmel_start_init>
	azc = 0;
 142:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <azc>
 146:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <azc+0x1>
 14a:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <azc+0x2>
 14e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <azc+0x3>
	temp = 1173;
 152:	85 e9       	ldi	r24, 0x95	; 149
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <temp>
 15e:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <temp+0x1>
 162:	a0 93 58 38 	sts	0x3858, r26	; 0x803858 <temp+0x2>
 166:	b0 93 59 38 	sts	0x3859, r27	; 0x803859 <temp+0x3>
	reading = 0;
 16a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <reading>
 16e:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <reading+0x1>
 172:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <reading+0x2>
 176:	10 92 64 38 	sts	0x3864, r1	; 0x803864 <reading+0x3>
	ADC_0_enable();
 17a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_0_enable>
	
	count = 0;
 17e:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <count>
	
	ones = 0;
 182:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <ones>
 186:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <ones+0x1>
	tens = 0;
 18a:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <tens>
 18e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <tens+0x1>
	hundreds = 0;
 192:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <hundreds>
 196:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <hundreds+0x1>
	thousands = 0;
 19a:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <thousands>
 19e:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <thousands+0x1>
	
	c_ones = characters[ones];
 1a2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1a6:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <c_ones>
	c_tens = characters[tens];
 1aa:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <c_tens>
	c_hundreds = characters[hundreds];
 1ae:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <c_hundreds>
	c_thousands = characters[thousands];
 1b2:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <c_thousands>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 1b6:	81 b1       	in	r24, 0x01	; 1
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	81 b9       	out	0x01, r24	; 1
	L1_set_level(true);

	/* Replace with your application code */
	while (1) {
		
		reading = (ADC_0_get_conversion(2) + reading) / 2;
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 fd 01 	call	0x3fa	; 0x3fa <ADC_0_get_conversion>
 1c2:	00 91 61 38 	lds	r16, 0x3861	; 0x803861 <reading>
 1c6:	10 91 62 38 	lds	r17, 0x3862	; 0x803862 <reading+0x1>
 1ca:	20 91 63 38 	lds	r18, 0x3863	; 0x803863 <reading+0x2>
 1ce:	30 91 64 38 	lds	r19, 0x3864	; 0x803864 <reading+0x3>
 1d2:	dc 01       	movw	r26, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	80 0f       	add	r24, r16
 1d8:	91 1f       	adc	r25, r17
 1da:	a2 1f       	adc	r26, r18
 1dc:	b3 1f       	adc	r27, r19
 1de:	bc 01       	movw	r22, r24
 1e0:	cd 01       	movw	r24, r26
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	77 95       	ror	r23
 1e8:	67 95       	ror	r22
 1ea:	60 93 61 38 	sts	0x3861, r22	; 0x803861 <reading>
 1ee:	70 93 62 38 	sts	0x3862, r23	; 0x803862 <reading+0x1>
 1f2:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <reading+0x2>
 1f6:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <reading+0x3>
		uint32_t temp = (0.9508 * reading) - 41.2131;
 1fa:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
 1fe:	21 ea       	ldi	r18, 0xA1	; 161
 200:	37 e6       	ldi	r19, 0x67	; 103
 202:	43 e7       	ldi	r20, 0x73	; 115
 204:	5f e3       	ldi	r21, 0x3F	; 63
 206:	0e 94 47 06 	call	0xc8e	; 0xc8e <__mulsf3>
 20a:	27 e3       	ldi	r18, 0x37	; 55
 20c:	3a ed       	ldi	r19, 0xDA	; 218
 20e:	44 e2       	ldi	r20, 0x24	; 36
 210:	52 e4       	ldi	r21, 0x42	; 66
 212:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__subsf3>
 216:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
		USART0.TXDATAL = temp;
 21e:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
		//temp = 1128;
		
		ones = temp % 10;
 222:	2a e0       	ldi	r18, 0x0A	; 10
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__udivmodsi4>
 22e:	4b 01       	movw	r8, r22
 230:	5c 01       	movw	r10, r24
 232:	60 93 54 38 	sts	0x3854, r22	; 0x803854 <ones>
 236:	70 93 55 38 	sts	0x3855, r23	; 0x803855 <ones+0x1>
		temp = temp - ones;
 23a:	cb 01       	movw	r24, r22
 23c:	77 0f       	add	r23, r23
 23e:	aa 0b       	sbc	r26, r26
 240:	bb 0b       	sbc	r27, r27
 242:	c8 1a       	sub	r12, r24
 244:	d9 0a       	sbc	r13, r25
 246:	ea 0a       	sbc	r14, r26
 248:	fb 0a       	sbc	r15, r27
		
		tens = temp % 100;
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	24 e6       	ldi	r18, 0x64	; 100
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	0e 94 c8 06 	call	0xd90	; 0xd90 <__udivmodsi4>
		temp = temp - tens;
 25a:	8b 01       	movw	r16, r22
 25c:	07 2e       	mov	r0, r23
 25e:	00 0c       	add	r0, r0
 260:	22 0b       	sbc	r18, r18
 262:	33 0b       	sbc	r19, r19
 264:	c0 1a       	sub	r12, r16
 266:	d1 0a       	sbc	r13, r17
 268:	e2 0a       	sbc	r14, r18
 26a:	f3 0a       	sbc	r15, r19
		tens /= 10;
 26c:	cb 01       	movw	r24, r22
 26e:	6a e0       	ldi	r22, 0x0A	; 10
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divmodhi4>
 276:	60 93 65 38 	sts	0x3865, r22	; 0x803865 <tens>
 27a:	70 93 66 38 	sts	0x3866, r23	; 0x803866 <tens+0x1>
		
		hundreds = temp % 1000;
 27e:	0f 2e       	mov	r0, r31
 280:	f8 ee       	ldi	r31, 0xE8	; 232
 282:	4f 2e       	mov	r4, r31
 284:	f3 e0       	ldi	r31, 0x03	; 3
 286:	5f 2e       	mov	r5, r31
 288:	61 2c       	mov	r6, r1
 28a:	71 2c       	mov	r7, r1
 28c:	f0 2d       	mov	r31, r0
 28e:	c7 01       	movw	r24, r14
 290:	b6 01       	movw	r22, r12
 292:	a3 01       	movw	r20, r6
 294:	92 01       	movw	r18, r4
 296:	0e 94 c8 06 	call	0xd90	; 0xd90 <__udivmodsi4>
		temp = temp - hundreds;
 29a:	8b 01       	movw	r16, r22
 29c:	07 2e       	mov	r0, r23
 29e:	00 0c       	add	r0, r0
 2a0:	22 0b       	sbc	r18, r18
 2a2:	33 0b       	sbc	r19, r19
 2a4:	c0 1a       	sub	r12, r16
 2a6:	d1 0a       	sbc	r13, r17
 2a8:	e2 0a       	sbc	r14, r18
 2aa:	f3 0a       	sbc	r15, r19
		hundreds /= 100;
 2ac:	cb 01       	movw	r24, r22
 2ae:	64 e6       	ldi	r22, 0x64	; 100
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divmodhi4>
 2b6:	60 93 52 38 	sts	0x3852, r22	; 0x803852 <hundreds>
 2ba:	70 93 53 38 	sts	0x3853, r23	; 0x803853 <hundreds+0x1>
		
		thousands = temp / 1000;
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	a3 01       	movw	r20, r6
 2c4:	92 01       	movw	r18, r4
 2c6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__udivmodsi4>
 2ca:	20 93 69 38 	sts	0x3869, r18	; 0x803869 <thousands>
 2ce:	30 93 6a 38 	sts	0x386A, r19	; 0x80386a <thousands+0x1>
		
		
		
		
		
		load(characters[ones]);
 2d2:	f4 01       	movw	r30, r8
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	f8 4c       	sbci	r31, 0xC8	; 200
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 92 00 	call	0x124	; 0x124 <load>
 2de:	81 b1       	in	r24, 0x01	; 1
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	81 ee       	ldi	r24, 0xE1	; 225
 2e6:	94 e0       	ldi	r25, 0x04	; 4
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x1aa>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1b0>
 2ee:	00 00       	nop
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2f0:	81 b1       	in	r24, 0x01	; 1
 2f2:	8f 7e       	andi	r24, 0xEF	; 239
 2f4:	81 b9       	out	0x01, r24	; 1
		L4_set_level(true);
		_delay_us(REFRESH_RATE_DELAY);
		L4_set_level(false);
		
		load(characters[tens]);
 2f6:	e0 91 65 38 	lds	r30, 0x3865	; 0x803865 <tens>
 2fa:	f0 91 66 38 	lds	r31, 0x3866	; 0x803866 <tens+0x1>
 2fe:	e0 50       	subi	r30, 0x00	; 0
 300:	f8 4c       	sbci	r31, 0xC8	; 200
 302:	80 81       	ld	r24, Z
 304:	0e 94 92 00 	call	0x124	; 0x124 <load>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 308:	81 b1       	in	r24, 0x01	; 1
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	81 b9       	out	0x01, r24	; 1
 30e:	81 ee       	ldi	r24, 0xE1	; 225
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x1d4>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x1da>
 318:	00 00       	nop
	} else {
		VPORTA.OUT &= ~(1 << pin);
 31a:	81 b1       	in	r24, 0x01	; 1
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	81 b9       	out	0x01, r24	; 1
		L3_set_level(true);
		_delay_us(REFRESH_RATE_DELAY);
		L3_set_level(false);
		
		load(characters[hundreds]);
 320:	e0 91 52 38 	lds	r30, 0x3852	; 0x803852 <hundreds>
 324:	f0 91 53 38 	lds	r31, 0x3853	; 0x803853 <hundreds+0x1>
 328:	e0 50       	subi	r30, 0x00	; 0
 32a:	f8 4c       	sbci	r31, 0xC8	; 200
 32c:	80 81       	ld	r24, Z
 32e:	0e 94 92 00 	call	0x124	; 0x124 <load>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 332:	81 b1       	in	r24, 0x01	; 1
 334:	80 64       	ori	r24, 0x40	; 64
 336:	81 b9       	out	0x01, r24	; 1
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x1fe>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x204>
 342:	00 00       	nop
	} else {
		VPORTA.OUT &= ~(1 << pin);
 344:	81 b1       	in	r24, 0x01	; 1
 346:	8f 7b       	andi	r24, 0xBF	; 191
 348:	81 b9       	out	0x01, r24	; 1
		L2_set_level(true);
		_delay_us(REFRESH_RATE_DELAY);
		L2_set_level(false);
		
		load(characters[thousands]);
 34a:	e0 91 69 38 	lds	r30, 0x3869	; 0x803869 <thousands>
 34e:	f0 91 6a 38 	lds	r31, 0x386A	; 0x80386a <thousands+0x1>
 352:	e0 50       	subi	r30, 0x00	; 0
 354:	f8 4c       	sbci	r31, 0xC8	; 200
 356:	80 81       	ld	r24, Z
 358:	0e 94 92 00 	call	0x124	; 0x124 <load>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 35c:	81 b1       	in	r24, 0x01	; 1
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	81 b9       	out	0x01, r24	; 1
 362:	81 ee       	ldi	r24, 0xE1	; 225
 364:	94 e0       	ldi	r25, 0x04	; 4
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x228>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x22e>
 36c:	00 00       	nop
	} else {
		VPORTA.OUT &= ~(1 << pin);
 36e:	81 b1       	in	r24, 0x01	; 1
 370:	8f 77       	andi	r24, 0x7F	; 127
 372:	81 b9       	out	0x01, r24	; 1
		L1_set_level(true);
		_delay_us(REFRESH_RATE_DELAY);
		L1_set_level(false);
		count = 0b10011011;
 374:	8b e9       	ldi	r24, 0x9B	; 155
 376:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <count>
		i2c_send(count);
 37a:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_send>
 37e:	81 e4       	ldi	r24, 0x41	; 65
 380:	93 e0       	ldi	r25, 0x03	; 3
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x244>
 386:	00 00       	nop
 388:	19 cf       	rjmp	.-462    	; 0x1bc <main+0x7e>

0000038a <__vector_8>:
	latch();
	enableOutput();
}

ISR(TCA0_OVF_vect)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	int flags = TCA0.SINGLE.INTFLAGS;
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	fa e0       	ldi	r31, 0x0A	; 10
 39e:	83 85       	ldd	r24, Z+11	; 0x0b
	//ones++;
	TCA0.SINGLE.INTFLAGS = flags;
 3a0:	83 87       	std	Z+11, r24	; 0x0b
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
 3b2:	e0 e0       	ldi	r30, 0x00	; 0
 3b4:	f6 e0       	ldi	r31, 0x06	; 6
 3b6:	80 e2       	ldi	r24, 0x20	; 32
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	8b e1       	ldi	r24, 0x1B	; 27
 3bc:	80 87       	std	Z+8, r24	; 0x08
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 83       	st	Z, r24
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <ADC_0_enable>:
 3c6:	e0 e0       	ldi	r30, 0x00	; 0
 3c8:	f6 e0       	ldi	r31, 0x06	; 6
 3ca:	80 81       	ld	r24, Z
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 83       	st	Z, r24
 3d0:	08 95       	ret

000003d2 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS = channel;
 3d2:	e0 e0       	ldi	r30, 0x00	; 0
 3d4:	f6 e0       	ldi	r31, 0x06	; 6
 3d6:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc;
 3d8:	82 85       	ldd	r24, Z+10	; 0x0a
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	82 87       	std	Z+10, r24	; 0x0a
 3de:	08 95       	ret

000003e0 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 3e0:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <__RODATA_PM_OFFSET__+0x7f8605>
}
 3e4:	81 70       	andi	r24, 0x01	; 1
 3e6:	08 95       	ret

000003e8 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RESULT);
 3e8:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 3ec:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
 3f0:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
 3f4:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
}
 3f8:	08 95       	ret

000003fa <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 3fa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 3fe:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_0_is_conversion_done>
 402:	88 23       	and	r24, r24
 404:	e1 f3       	breq	.-8      	; 0x3fe <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 406:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
 40a:	e0 e0       	ldi	r30, 0x00	; 0
 40c:	f6 e0       	ldi	r31, 0x06	; 6
 40e:	25 81       	ldd	r18, Z+5	; 0x05
 410:	21 60       	ori	r18, 0x01	; 1
 412:	25 83       	std	Z+5, r18	; 0x05
	return res;
}
 414:	08 95       	ret

00000416 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret

0000041a <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret

0000041e <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 41e:	78 94       	sei
	
	return 0;
}
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret

00000424 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 c0       	rjmp	.+16     	; 0x438 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 428:	e8 2f       	mov	r30, r24
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e0 5f       	subi	r30, 0xF0	; 240
 42e:	fb 4f       	sbci	r31, 0xFB	; 251
 430:	90 81       	ld	r25, Z
 432:	98 60       	ori	r25, 0x08	; 8
 434:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	b0 f3       	brcs	.-20     	; 0x428 <mcu_init+0x4>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 c0       	rjmp	.+16     	; 0x450 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 440:	e8 2f       	mov	r30, r24
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	e0 5d       	subi	r30, 0xD0	; 208
 446:	fb 4f       	sbci	r31, 0xFB	; 251
 448:	90 81       	ld	r25, Z
 44a:	98 60       	ori	r25, 0x08	; 8
 44c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	88 30       	cpi	r24, 0x08	; 8
 452:	b0 f3       	brcs	.-20     	; 0x440 <mcu_init+0x1c>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 c0       	rjmp	.+16     	; 0x468 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 458:	e8 2f       	mov	r30, r24
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	e0 5b       	subi	r30, 0xB0	; 176
 45e:	fb 4f       	sbci	r31, 0xFB	; 251
 460:	90 81       	ld	r25, Z
 462:	98 60       	ori	r25, 0x08	; 8
 464:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	b0 f3       	brcs	.-20     	; 0x458 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 46c:	08 95       	ret

0000046e <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 46e:	e2 e1       	ldi	r30, 0x12	; 18
 470:	f4 e0       	ldi	r31, 0x04	; 4
 472:	80 81       	ld	r24, Z
 474:	88 7f       	andi	r24, 0xF8	; 248
 476:	84 60       	ori	r24, 0x04	; 4
 478:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 47a:	80 81       	ld	r24, Z
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	80 83       	st	Z, r24
	// Disable digital input buffer
	PA2_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PA2_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 480:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <ADC_0_init>
 484:	08 95       	ret

00000486 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 486:	84 b1       	in	r24, 0x04	; 4
 488:	87 7f       	andi	r24, 0xF7	; 247
 48a:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 48c:	e3 e3       	ldi	r30, 0x33	; 51
 48e:	f4 e0       	ldi	r31, 0x04	; 4
 490:	80 81       	ld	r24, Z
 492:	87 7f       	andi	r24, 0xF7	; 247
 494:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 496:	85 b1       	in	r24, 0x05	; 5
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 49c:	84 b1       	in	r24, 0x04	; 4
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	84 b9       	out	0x04, r24	; 4
	    // <true"> High
	    false);

	PB2_set_dir(PORT_DIR_OUT);

	USART_0_init();
 4a2:	0e 94 13 05 	call	0xa26	; 0xa26 <USART_0_init>
 4a6:	08 95       	ret

000004a8 <timer_initialization>:
}

void timer_initialization(void)
{

	timer_init();
 4a8:	0e 94 03 05 	call	0xa06	; 0xa06 <timer_init>
 4ac:	08 95       	ret

000004ae <I2C_0_initialization>:

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{

	I2C_0_init();
 4ae:	0e 94 56 04 	call	0x8ac	; 0x8ac <I2C_0_init>
 4b2:	08 95       	ret

000004b4 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 4b4:	0e 94 12 02 	call	0x424	; 0x424 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 4b8:	81 b1       	in	r24, 0x01	; 1
 4ba:	8f 7e       	andi	r24, 0xEF	; 239
 4bc:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4be:	80 b1       	in	r24, 0x00	; 0
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 4c4:	81 b1       	in	r24, 0x01	; 1
 4c6:	8f 7d       	andi	r24, 0xDF	; 223
 4c8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4ca:	80 b1       	in	r24, 0x00	; 0
 4cc:	80 62       	ori	r24, 0x20	; 32
 4ce:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 4d0:	81 b1       	in	r24, 0x01	; 1
 4d2:	8f 7b       	andi	r24, 0xBF	; 191
 4d4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4d6:	80 b1       	in	r24, 0x00	; 0
 4d8:	80 64       	ori	r24, 0x40	; 64
 4da:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 4dc:	81 b1       	in	r24, 0x01	; 1
 4de:	8f 77       	andi	r24, 0x7F	; 127
 4e0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4e2:	80 b1       	in	r24, 0x00	; 0
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 4e8:	89 b1       	in	r24, 0x09	; 9
 4ea:	8e 7f       	andi	r24, 0xFE	; 254
 4ec:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 4ee:	88 b1       	in	r24, 0x08	; 8
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 4f4:	89 b1       	in	r24, 0x09	; 9
 4f6:	82 60       	ori	r24, 0x02	; 2
 4f8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 4fa:	88 b1       	in	r24, 0x08	; 8
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 500:	89 b1       	in	r24, 0x09	; 9
 502:	8b 7f       	andi	r24, 0xFB	; 251
 504:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 506:	88 b1       	in	r24, 0x08	; 8
 508:	84 60       	ori	r24, 0x04	; 4
 50a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 50c:	89 b1       	in	r24, 0x09	; 9
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 512:	88 b1       	in	r24, 0x08	; 8
 514:	88 60       	ori	r24, 0x08	; 8
 516:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	SDI_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 518:	0e 94 0d 02 	call	0x41a	; 0x41a <CLKCTRL_init>

	ADC_0_initialization();
 51c:	0e 94 37 02 	call	0x46e	; 0x46e <ADC_0_initialization>

	USART_0_initialization();
 520:	0e 94 43 02 	call	0x486	; 0x486 <USART_0_initialization>

	timer_initialization();
 524:	0e 94 54 02 	call	0x4a8	; 0x4a8 <timer_initialization>

	CPUINT_init();
 528:	0e 94 0f 02 	call	0x41e	; 0x41e <CPUINT_init>

	SLPCTRL_init();
 52c:	0e 94 01 05 	call	0xa02	; 0xa02 <SLPCTRL_init>

	I2C_0_initialization();
 530:	0e 94 57 02 	call	0x4ae	; 0x4ae <I2C_0_initialization>

	BOD_init();
 534:	0e 94 0b 02 	call	0x416	; 0x416 <BOD_init>
 538:	08 95       	ret

0000053a <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
}
 53a:	e0 ea       	ldi	r30, 0xA0	; 160
 53c:	f8 e0       	ldi	r31, 0x08	; 8
 53e:	84 81       	ldd	r24, Z+4	; 0x04
 540:	88 60       	ori	r24, 0x08	; 8
 542:	84 83       	std	Z+4, r24	; 0x04
 544:	85 81       	ldd	r24, Z+5	; 0x05
 546:	81 60       	ori	r24, 0x01	; 1
 548:	85 83       	std	Z+5, r24	; 0x05
 54a:	ee e2       	ldi	r30, 0x2E	; 46
 54c:	f8 e3       	ldi	r31, 0x38	; 56
 54e:	80 81       	ld	r24, Z
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	80 83       	st	Z, r24
 554:	13 86       	std	Z+11, r1	; 0x0b
 556:	8e e0       	ldi	r24, 0x0E	; 14
 558:	08 95       	ret

0000055a <I2C_0_do_I2C_IDLE>:
 55a:	ee e2       	ldi	r30, 0x2E	; 46
 55c:	f8 e3       	ldi	r31, 0x38	; 56
 55e:	80 81       	ld	r24, Z
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	80 83       	st	Z, r24
 564:	13 86       	std	Z+11, r1	; 0x0b
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	08 95       	ret

0000056a <I2C_0_do_I2C_SEND_STOP>:
 56a:	e0 ea       	ldi	r30, 0xA0	; 160
 56c:	f8 e0       	ldi	r31, 0x08	; 8
 56e:	84 81       	ldd	r24, Z+4	; 0x04
 570:	83 60       	ori	r24, 0x03	; 3
 572:	84 83       	std	Z+4, r24	; 0x04
 574:	0e 94 ad 02 	call	0x55a	; 0x55a <I2C_0_do_I2C_IDLE>
 578:	08 95       	ret

0000057a <I2C_0_do_I2C_SEND_ADR_READ>:
 57a:	ee e2       	ldi	r30, 0x2E	; 46
 57c:	f8 e3       	ldi	r31, 0x38	; 56
 57e:	80 81       	ld	r24, Z
 580:	88 60       	ori	r24, 0x08	; 8
 582:	80 83       	st	Z, r24
 584:	81 81       	ldd	r24, Z+1	; 0x01
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__RODATA_PM_OFFSET__+0x7f88a7>
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	08 95       	ret

00000596 <I2C_0_do_I2C_SEND_RESTART>:
 596:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_0_do_I2C_SEND_ADR_READ>
 59a:	08 95       	ret

0000059c <I2C_0_do_I2C_SEND_RESTART_READ>:
 59c:	0e 94 bd 02 	call	0x57a	; 0x57a <I2C_0_do_I2C_SEND_ADR_READ>
 5a0:	08 95       	ret

000005a2 <I2C_0_do_I2C_SEND_ADR_WRITE>:
 5a2:	ee e2       	ldi	r30, 0x2E	; 46
 5a4:	f8 e3       	ldi	r31, 0x38	; 56
 5a6:	80 81       	ld	r24, Z
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	80 83       	st	Z, r24
 5ac:	81 81       	ldd	r24, Z+1	; 0x01
 5ae:	88 0f       	add	r24, r24
 5b0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__RODATA_PM_OFFSET__+0x7f88a7>
 5b4:	83 e0       	ldi	r24, 0x03	; 3
 5b6:	08 95       	ret

000005b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
 5b8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <I2C_0_do_I2C_SEND_ADR_WRITE>
 5bc:	08 95       	ret

000005be <I2C_0_do_I2C_DO_ADDRESS_NACK>:
 5be:	ae e2       	ldi	r26, 0x2E	; 46
 5c0:	b8 e3       	ldi	r27, 0x38	; 56
 5c2:	8c 91       	ld	r24, X
 5c4:	87 7f       	andi	r24, 0xF7	; 247
 5c6:	8c 93       	st	X, r24
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	1b 96       	adiw	r26, 0x0b	; 11
 5cc:	8c 93       	st	X, r24
 5ce:	1b 97       	sbiw	r26, 0x0b	; 11
 5d0:	50 96       	adiw	r26, 0x10	; 16
 5d2:	ed 91       	ld	r30, X+
 5d4:	fc 91       	ld	r31, X
 5d6:	51 97       	sbiw	r26, 0x11	; 17
 5d8:	5c 96       	adiw	r26, 0x1c	; 28
 5da:	8d 91       	ld	r24, X+
 5dc:	9c 91       	ld	r25, X
 5de:	5d 97       	sbiw	r26, 0x1d	; 29
 5e0:	09 95       	icall
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	19 f0       	breq	.+6      	; 0x5ec <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
 5e6:	83 30       	cpi	r24, 0x03	; 3
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
 5ec:	0e 94 ce 02 	call	0x59c	; 0x59c <I2C_0_do_I2C_SEND_RESTART_READ>
 5f0:	08 95       	ret
 5f2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 5f6:	08 95       	ret
 5f8:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_0_do_I2C_SEND_STOP>
 5fc:	08 95       	ret

000005fe <I2C_0_do_I2C_RX_DO_ACK>:
 5fe:	e0 ea       	ldi	r30, 0xA0	; 160
 600:	f8 e0       	ldi	r31, 0x08	; 8
 602:	84 81       	ldd	r24, Z+4	; 0x04
 604:	8b 7f       	andi	r24, 0xFB	; 251
 606:	84 83       	std	Z+4, r24	; 0x04
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	08 95       	ret

0000060c <I2C_0_do_I2C_TX_DO_ACK>:
 60c:	e0 ea       	ldi	r30, 0xA0	; 160
 60e:	f8 e0       	ldi	r31, 0x08	; 8
 610:	84 81       	ldd	r24, Z+4	; 0x04
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	84 83       	std	Z+4, r24	; 0x04
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	08 95       	ret

0000061a <I2C_0_do_I2C_DO_NACK_STOP>:
 61a:	e0 ea       	ldi	r30, 0xA0	; 160
 61c:	f8 e0       	ldi	r31, 0x08	; 8
 61e:	84 81       	ldd	r24, Z+4	; 0x04
 620:	84 60       	ori	r24, 0x04	; 4
 622:	84 83       	std	Z+4, r24	; 0x04
 624:	84 81       	ldd	r24, Z+4	; 0x04
 626:	83 60       	ori	r24, 0x03	; 3
 628:	84 83       	std	Z+4, r24	; 0x04
 62a:	0e 94 ad 02 	call	0x55a	; 0x55a <I2C_0_do_I2C_IDLE>
 62e:	08 95       	ret

00000630 <I2C_0_do_I2C_DO_NACK_RESTART>:
 630:	e0 ea       	ldi	r30, 0xA0	; 160
 632:	f8 e0       	ldi	r31, 0x08	; 8
 634:	84 81       	ldd	r24, Z+4	; 0x04
 636:	84 60       	ori	r24, 0x04	; 4
 638:	84 83       	std	Z+4, r24	; 0x04
 63a:	88 e0       	ldi	r24, 0x08	; 8
 63c:	08 95       	ret

0000063e <I2C_0_do_I2C_TX>:
 63e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 642:	84 ff       	sbrs	r24, 4
 644:	19 c0       	rjmp	.+50     	; 0x678 <I2C_0_do_I2C_TX+0x3a>
 646:	ae e2       	ldi	r26, 0x2E	; 46
 648:	b8 e3       	ldi	r27, 0x38	; 56
 64a:	52 96       	adiw	r26, 0x12	; 18
 64c:	ed 91       	ld	r30, X+
 64e:	fc 91       	ld	r31, X
 650:	53 97       	sbiw	r26, 0x13	; 19
 652:	5e 96       	adiw	r26, 0x1e	; 30
 654:	8d 91       	ld	r24, X+
 656:	9c 91       	ld	r25, X
 658:	5f 97       	sbiw	r26, 0x1f	; 31
 65a:	09 95       	icall
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	19 f0       	breq	.+6      	; 0x666 <I2C_0_do_I2C_TX+0x28>
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	21 f0       	breq	.+8      	; 0x66c <I2C_0_do_I2C_TX+0x2e>
 664:	06 c0       	rjmp	.+12     	; 0x672 <I2C_0_do_I2C_TX+0x34>
 666:	0e 94 ce 02 	call	0x59c	; 0x59c <I2C_0_do_I2C_SEND_RESTART_READ>
 66a:	08 95       	ret
 66c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 670:	08 95       	ret
 672:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_0_do_I2C_SEND_STOP>
 676:	08 95       	ret
 678:	ee e2       	ldi	r30, 0x2E	; 46
 67a:	f8 e3       	ldi	r31, 0x38	; 56
 67c:	80 81       	ld	r24, Z
 67e:	87 7f       	andi	r24, 0xF7	; 247
 680:	80 83       	st	Z, r24
 682:	a2 81       	ldd	r26, Z+2	; 0x02
 684:	b3 81       	ldd	r27, Z+3	; 0x03
 686:	cd 01       	movw	r24, r26
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	82 83       	std	Z+2, r24	; 0x02
 68c:	93 83       	std	Z+3, r25	; 0x03
 68e:	8c 91       	ld	r24, X
 690:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__RODATA_PM_OFFSET__+0x7f88a8>
 694:	84 81       	ldd	r24, Z+4	; 0x04
 696:	95 81       	ldd	r25, Z+5	; 0x05
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	84 83       	std	Z+4, r24	; 0x04
 69c:	95 83       	std	Z+5, r25	; 0x05
 69e:	89 2b       	or	r24, r25
 6a0:	11 f0       	breq	.+4      	; 0x6a6 <I2C_0_do_I2C_TX+0x68>
 6a2:	83 e0       	ldi	r24, 0x03	; 3
 6a4:	08 95       	ret
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	08 95       	ret

000006aa <I2C_0_do_I2C_RX>:
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ee e2       	ldi	r30, 0x2E	; 46
 6b0:	f8 e3       	ldi	r31, 0x38	; 56
 6b2:	80 81       	ld	r24, Z
 6b4:	87 7f       	andi	r24, 0xF7	; 247
 6b6:	80 83       	st	Z, r24
 6b8:	84 81       	ldd	r24, Z+4	; 0x04
 6ba:	95 81       	ldd	r25, Z+5	; 0x05
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	31 f4       	brne	.+12     	; 0x6cc <I2C_0_do_I2C_RX+0x22>
 6c0:	e0 ea       	ldi	r30, 0xA0	; 160
 6c2:	f8 e0       	ldi	r31, 0x08	; 8
 6c4:	84 81       	ldd	r24, Z+4	; 0x04
 6c6:	84 60       	ori	r24, 0x04	; 4
 6c8:	84 83       	std	Z+4, r24	; 0x04
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <I2C_0_do_I2C_RX+0x2c>
 6cc:	e0 ea       	ldi	r30, 0xA0	; 160
 6ce:	f8 e0       	ldi	r31, 0x08	; 8
 6d0:	84 81       	ldd	r24, Z+4	; 0x04
 6d2:	8b 7f       	andi	r24, 0xFB	; 251
 6d4:	84 83       	std	Z+4, r24	; 0x04
 6d6:	ee e2       	ldi	r30, 0x2E	; 46
 6d8:	f8 e3       	ldi	r31, 0x38	; 56
 6da:	84 81       	ldd	r24, Z+4	; 0x04
 6dc:	95 81       	ldd	r25, Z+5	; 0x05
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	84 83       	std	Z+4, r24	; 0x04
 6e2:	95 83       	std	Z+5, r25	; 0x05
 6e4:	89 2b       	or	r24, r25
 6e6:	a9 f0       	breq	.+42     	; 0x712 <I2C_0_do_I2C_RX+0x68>
 6e8:	df 01       	movw	r26, r30
 6ea:	c2 81       	ldd	r28, Z+2	; 0x02
 6ec:	d3 81       	ldd	r29, Z+3	; 0x03
 6ee:	e0 ea       	ldi	r30, 0xA0	; 160
 6f0:	f8 e0       	ldi	r31, 0x08	; 8
 6f2:	80 85       	ldd	r24, Z+8	; 0x08
 6f4:	88 83       	st	Y, r24
 6f6:	12 96       	adiw	r26, 0x02	; 2
 6f8:	8d 91       	ld	r24, X+
 6fa:	9c 91       	ld	r25, X
 6fc:	13 97       	sbiw	r26, 0x03	; 3
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	12 96       	adiw	r26, 0x02	; 2
 702:	8d 93       	st	X+, r24
 704:	9c 93       	st	X, r25
 706:	13 97       	sbiw	r26, 0x03	; 3
 708:	84 81       	ldd	r24, Z+4	; 0x04
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	84 83       	std	Z+4, r24	; 0x04
 70e:	84 e0       	ldi	r24, 0x04	; 4
 710:	26 c0       	rjmp	.+76     	; 0x75e <I2C_0_do_I2C_RX+0xb4>
 712:	ae e2       	ldi	r26, 0x2E	; 46
 714:	b8 e3       	ldi	r27, 0x38	; 56
 716:	12 96       	adiw	r26, 0x02	; 2
 718:	ed 91       	ld	r30, X+
 71a:	fc 91       	ld	r31, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
 71e:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__RODATA_PM_OFFSET__+0x7f88a8>
 722:	80 83       	st	Z, r24
 724:	12 96       	adiw	r26, 0x02	; 2
 726:	8d 91       	ld	r24, X+
 728:	9c 91       	ld	r25, X
 72a:	13 97       	sbiw	r26, 0x03	; 3
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	12 96       	adiw	r26, 0x02	; 2
 730:	8d 93       	st	X+, r24
 732:	9c 93       	st	X, r25
 734:	13 97       	sbiw	r26, 0x03	; 3
 736:	8c 91       	ld	r24, X
 738:	84 60       	ori	r24, 0x04	; 4
 73a:	8c 93       	st	X, r24
 73c:	1c 96       	adiw	r26, 0x0c	; 12
 73e:	ed 91       	ld	r30, X+
 740:	fc 91       	ld	r31, X
 742:	1d 97       	sbiw	r26, 0x0d	; 13
 744:	58 96       	adiw	r26, 0x18	; 24
 746:	8d 91       	ld	r24, X+
 748:	9c 91       	ld	r25, X
 74a:	59 97       	sbiw	r26, 0x19	; 25
 74c:	09 95       	icall
 74e:	82 50       	subi	r24, 0x02	; 2
 750:	82 30       	cpi	r24, 0x02	; 2
 752:	18 f4       	brcc	.+6      	; 0x75a <I2C_0_do_I2C_RX+0xb0>
 754:	0e 94 18 03 	call	0x630	; 0x630 <I2C_0_do_I2C_DO_NACK_RESTART>
 758:	02 c0       	rjmp	.+4      	; 0x75e <I2C_0_do_I2C_RX+0xb4>
 75a:	0e 94 0d 03 	call	0x61a	; 0x61a <I2C_0_do_I2C_DO_NACK_STOP>
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <I2C_0_do_I2C_TX_EMPTY>:
 764:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 768:	84 ff       	sbrs	r24, 4
 76a:	19 c0       	rjmp	.+50     	; 0x79e <I2C_0_do_I2C_TX_EMPTY+0x3a>
 76c:	ae e2       	ldi	r26, 0x2E	; 46
 76e:	b8 e3       	ldi	r27, 0x38	; 56
 770:	52 96       	adiw	r26, 0x12	; 18
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	53 97       	sbiw	r26, 0x13	; 19
 778:	5e 96       	adiw	r26, 0x1e	; 30
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	5f 97       	sbiw	r26, 0x1f	; 31
 780:	09 95       	icall
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	19 f0       	breq	.+6      	; 0x78c <I2C_0_do_I2C_TX_EMPTY+0x28>
 786:	83 30       	cpi	r24, 0x03	; 3
 788:	21 f0       	breq	.+8      	; 0x792 <I2C_0_do_I2C_TX_EMPTY+0x2e>
 78a:	06 c0       	rjmp	.+12     	; 0x798 <I2C_0_do_I2C_TX_EMPTY+0x34>
 78c:	0e 94 ce 02 	call	0x59c	; 0x59c <I2C_0_do_I2C_SEND_RESTART_READ>
 790:	08 95       	ret
 792:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 796:	08 95       	ret
 798:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_0_do_I2C_SEND_STOP>
 79c:	08 95       	ret
 79e:	ae e2       	ldi	r26, 0x2E	; 46
 7a0:	b8 e3       	ldi	r27, 0x38	; 56
 7a2:	8c 91       	ld	r24, X
 7a4:	84 60       	ori	r24, 0x04	; 4
 7a6:	8c 93       	st	X, r24
 7a8:	1c 96       	adiw	r26, 0x0c	; 12
 7aa:	ed 91       	ld	r30, X+
 7ac:	fc 91       	ld	r31, X
 7ae:	1d 97       	sbiw	r26, 0x0d	; 13
 7b0:	58 96       	adiw	r26, 0x18	; 24
 7b2:	8d 91       	ld	r24, X+
 7b4:	9c 91       	ld	r25, X
 7b6:	59 97       	sbiw	r26, 0x19	; 25
 7b8:	09 95       	icall
 7ba:	83 30       	cpi	r24, 0x03	; 3
 7bc:	39 f0       	breq	.+14     	; 0x7cc <I2C_0_do_I2C_TX_EMPTY+0x68>
 7be:	84 30       	cpi	r24, 0x04	; 4
 7c0:	41 f0       	breq	.+16     	; 0x7d2 <I2C_0_do_I2C_TX_EMPTY+0x6e>
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	49 f4       	brne	.+18     	; 0x7d8 <I2C_0_do_I2C_TX_EMPTY+0x74>
 7c6:	0e 94 ce 02 	call	0x59c	; 0x59c <I2C_0_do_I2C_SEND_RESTART_READ>
 7ca:	08 95       	ret
 7cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 7d0:	08 95       	ret
 7d2:	0e 94 1f 03 	call	0x63e	; 0x63e <I2C_0_do_I2C_TX>
 7d6:	08 95       	ret
 7d8:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_0_do_I2C_SEND_STOP>
 7dc:	08 95       	ret

000007de <I2C_0_do_I2C_BUS_COLLISION>:
 7de:	e0 ea       	ldi	r30, 0xA0	; 160
 7e0:	f8 e0       	ldi	r31, 0x08	; 8
 7e2:	85 81       	ldd	r24, Z+5	; 0x05
 7e4:	88 60       	ori	r24, 0x08	; 8
 7e6:	85 83       	std	Z+5, r24	; 0x05
 7e8:	ae e2       	ldi	r26, 0x2E	; 46
 7ea:	b8 e3       	ldi	r27, 0x38	; 56
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	1b 96       	adiw	r26, 0x0b	; 11
 7f0:	8c 93       	st	X, r24
 7f2:	1b 97       	sbiw	r26, 0x0b	; 11
 7f4:	1e 96       	adiw	r26, 0x0e	; 14
 7f6:	ed 91       	ld	r30, X+
 7f8:	fc 91       	ld	r31, X
 7fa:	1f 97       	sbiw	r26, 0x0f	; 15
 7fc:	5a 96       	adiw	r26, 0x1a	; 26
 7fe:	8d 91       	ld	r24, X+
 800:	9c 91       	ld	r25, X
 802:	5b 97       	sbiw	r26, 0x1b	; 27
 804:	09 95       	icall
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	19 f0       	breq	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80a:	83 30       	cpi	r24, 0x03	; 3
 80c:	21 f0       	breq	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80e:	06 c0       	rjmp	.+12     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 810:	0e 94 ce 02 	call	0x59c	; 0x59c <I2C_0_do_I2C_SEND_RESTART_READ>
 814:	08 95       	ret
 816:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <I2C_0_do_I2C_SEND_RESTART_WRITE>
 81a:	08 95       	ret
 81c:	0e 94 9d 02 	call	0x53a	; 0x53a <I2C_0_do_I2C_RESET>
 820:	08 95       	ret

00000822 <I2C_0_do_I2C_BUS_ERROR>:
 822:	e0 ea       	ldi	r30, 0xA0	; 160
 824:	f8 e0       	ldi	r31, 0x08	; 8
 826:	84 81       	ldd	r24, Z+4	; 0x04
 828:	88 60       	ori	r24, 0x08	; 8
 82a:	84 83       	std	Z+4, r24	; 0x04
 82c:	85 81       	ldd	r24, Z+5	; 0x05
 82e:	81 60       	ori	r24, 0x01	; 1
 830:	85 83       	std	Z+5, r24	; 0x05
 832:	ee e2       	ldi	r30, 0x2E	; 46
 834:	f8 e3       	ldi	r31, 0x38	; 56
 836:	80 81       	ld	r24, Z
 838:	8e 7f       	andi	r24, 0xFE	; 254
 83a:	80 83       	st	Z, r24
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	83 87       	std	Z+11, r24	; 0x0b
 840:	8e e0       	ldi	r24, 0x0E	; 14
 842:	08 95       	ret

00000844 <I2C_0_master_isr>:
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	e0 ea       	ldi	r30, 0xA0	; 160
 84a:	f8 e0       	ldi	r31, 0x08	; 8
 84c:	85 81       	ldd	r24, Z+5	; 0x05
 84e:	80 6c       	ori	r24, 0xC0	; 192
 850:	85 83       	std	Z+5, r24	; 0x05
 852:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
 856:	83 ff       	sbrs	r24, 3
 858:	07 c0       	rjmp	.+14     	; 0x868 <I2C_0_master_isr+0x24>
 85a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 85e:	84 ff       	sbrs	r24, 4
 860:	03 c0       	rjmp	.+6      	; 0x868 <I2C_0_master_isr+0x24>
 862:	8f e0       	ldi	r24, 0x0F	; 15
 864:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <__data_end+0xa>
 868:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 86c:	83 ff       	sbrs	r24, 3
 86e:	03 c0       	rjmp	.+6      	; 0x876 <I2C_0_master_isr+0x32>
 870:	80 e1       	ldi	r24, 0x10	; 16
 872:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <__data_end+0xa>
 876:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 87a:	82 ff       	sbrs	r24, 2
 87c:	03 c0       	rjmp	.+6      	; 0x884 <I2C_0_master_isr+0x40>
 87e:	81 e1       	ldi	r24, 0x11	; 17
 880:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <__data_end+0xa>
 884:	ce e2       	ldi	r28, 0x2E	; 46
 886:	d8 e3       	ldi	r29, 0x38	; 56
 888:	ea 85       	ldd	r30, Y+10	; 0x0a
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	e6 5f       	subi	r30, 0xF6	; 246
 892:	f7 4c       	sbci	r31, 0xC7	; 199
 894:	01 90       	ld	r0, Z+
 896:	f0 81       	ld	r31, Z
 898:	e0 2d       	mov	r30, r0
 89a:	09 95       	icall
 89c:	8a 87       	std	Y+10, r24	; 0x0a
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <I2C_0_return_stop>:
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	08 95       	ret

000008a8 <I2C_0_return_reset>:
 8a8:	85 e0       	ldi	r24, 0x05	; 5
 8aa:	08 95       	ret

000008ac <I2C_0_init>:
 8ac:	e0 ea       	ldi	r30, 0xA0	; 160
 8ae:	f8 e0       	ldi	r31, 0x08	; 8
 8b0:	8b e0       	ldi	r24, 0x0B	; 11
 8b2:	86 83       	std	Z+6, r24	; 0x06
 8b4:	81 ec       	ldi	r24, 0xC1	; 193
 8b6:	83 83       	std	Z+3, r24	; 0x03
 8b8:	08 95       	ret

000008ba <I2C_0_open>:
 8ba:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <__data_end>
 8be:	91 fd       	sbrc	r25, 1
 8c0:	37 c0       	rjmp	.+110    	; 0x930 <I2C_0_open+0x76>
 8c2:	ee e2       	ldi	r30, 0x2E	; 46
 8c4:	f8 e3       	ldi	r31, 0x38	; 56
 8c6:	81 83       	std	Z+1, r24	; 0x01
 8c8:	89 2f       	mov	r24, r25
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	9e e0       	ldi	r25, 0x0E	; 14
 8d0:	92 87       	std	Z+10, r25	; 0x0a
 8d2:	24 ef       	ldi	r18, 0xF4	; 244
 8d4:	31 e0       	ldi	r19, 0x01	; 1
 8d6:	20 87       	std	Z+8, r18	; 0x08
 8d8:	31 87       	std	Z+9, r19	; 0x09
 8da:	87 7f       	andi	r24, 0xF7	; 247
 8dc:	84 60       	ori	r24, 0x04	; 4
 8de:	80 83       	st	Z, r24
 8e0:	82 e5       	ldi	r24, 0x52	; 82
 8e2:	94 e0       	ldi	r25, 0x04	; 4
 8e4:	84 87       	std	Z+12, r24	; 0x0c
 8e6:	95 87       	std	Z+13, r25	; 0x0d
 8e8:	10 8e       	std	Z+24, r1	; 0x18
 8ea:	11 8e       	std	Z+25, r1	; 0x19
 8ec:	86 87       	std	Z+14, r24	; 0x0e
 8ee:	97 87       	std	Z+15, r25	; 0x0f
 8f0:	12 8e       	std	Z+26, r1	; 0x1a
 8f2:	13 8e       	std	Z+27, r1	; 0x1b
 8f4:	80 8b       	std	Z+16, r24	; 0x10
 8f6:	91 8b       	std	Z+17, r25	; 0x11
 8f8:	14 8e       	std	Z+28, r1	; 0x1c
 8fa:	15 8e       	std	Z+29, r1	; 0x1d
 8fc:	82 8b       	std	Z+18, r24	; 0x12
 8fe:	93 8b       	std	Z+19, r25	; 0x13
 900:	16 8e       	std	Z+30, r1	; 0x1e
 902:	17 8e       	std	Z+31, r1	; 0x1f
 904:	84 e5       	ldi	r24, 0x54	; 84
 906:	94 e0       	ldi	r25, 0x04	; 4
 908:	84 8b       	std	Z+20, r24	; 0x14
 90a:	95 8b       	std	Z+21, r25	; 0x15
 90c:	10 a2       	std	Z+32, r1	; 0x20
 90e:	11 a2       	std	Z+33, r1	; 0x21
 910:	e0 ea       	ldi	r30, 0xA0	; 160
 912:	f8 e0       	ldi	r31, 0x08	; 8
 914:	84 81       	ldd	r24, Z+4	; 0x04
 916:	88 60       	ori	r24, 0x08	; 8
 918:	84 83       	std	Z+4, r24	; 0x04
 91a:	85 81       	ldd	r24, Z+5	; 0x05
 91c:	81 60       	ori	r24, 0x01	; 1
 91e:	85 83       	std	Z+5, r24	; 0x05
 920:	85 81       	ldd	r24, Z+5	; 0x05
 922:	80 6c       	ori	r24, 0xC0	; 192
 924:	85 83       	std	Z+5, r24	; 0x05
 926:	83 81       	ldd	r24, Z+3	; 0x03
 928:	80 6c       	ori	r24, 0xC0	; 192
 92a:	83 83       	std	Z+3, r24	; 0x03
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	08 95       	ret
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	08 95       	ret

00000934 <I2C_0_close>:
 934:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__RODATA_PM_OFFSET__+0x7f88a5>
 938:	82 ff       	sbrs	r24, 2
 93a:	07 c0       	rjmp	.+14     	; 0x94a <I2C_0_close+0x16>
 93c:	ee e2       	ldi	r30, 0x2E	; 46
 93e:	f8 e3       	ldi	r31, 0x38	; 56
 940:	80 81       	ld	r24, Z
 942:	8e 7f       	andi	r24, 0xFE	; 254
 944:	80 83       	st	Z, r24
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	83 87       	std	Z+11, r24	; 0x0b
 94a:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
 94e:	80 fd       	sbrc	r24, 0
 950:	17 c0       	rjmp	.+46     	; 0x980 <I2C_0_close+0x4c>
 952:	ee e2       	ldi	r30, 0x2E	; 46
 954:	f8 e3       	ldi	r31, 0x38	; 56
 956:	8d 7f       	andi	r24, 0xFD	; 253
 958:	80 83       	st	Z, r24
 95a:	8f ef       	ldi	r24, 0xFF	; 255
 95c:	81 83       	std	Z+1, r24	; 0x01
 95e:	a0 ea       	ldi	r26, 0xA0	; 160
 960:	b8 e0       	ldi	r27, 0x08	; 8
 962:	15 96       	adiw	r26, 0x05	; 5
 964:	8c 91       	ld	r24, X
 966:	15 97       	sbiw	r26, 0x05	; 5
 968:	80 6c       	ori	r24, 0xC0	; 192
 96a:	15 96       	adiw	r26, 0x05	; 5
 96c:	8c 93       	st	X, r24
 96e:	15 97       	sbiw	r26, 0x05	; 5
 970:	13 96       	adiw	r26, 0x03	; 3
 972:	8c 91       	ld	r24, X
 974:	13 97       	sbiw	r26, 0x03	; 3
 976:	8f 73       	andi	r24, 0x3F	; 63
 978:	13 96       	adiw	r26, 0x03	; 3
 97a:	8c 93       	st	X, r24
 97c:	83 85       	ldd	r24, Z+11	; 0x0b
 97e:	08 95       	ret
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	08 95       	ret

00000984 <I2C_0_master_operation>:
 984:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <__data_end>
 988:	90 fd       	sbrc	r25, 0
 98a:	11 c0       	rjmp	.+34     	; 0x9ae <I2C_0_master_operation+0x2a>
 98c:	ee e2       	ldi	r30, 0x2E	; 46
 98e:	f8 e3       	ldi	r31, 0x38	; 56
 990:	91 60       	ori	r25, 0x01	; 1
 992:	90 83       	st	Z, r25
 994:	88 23       	and	r24, r24
 996:	21 f0       	breq	.+8      	; 0x9a0 <I2C_0_master_operation+0x1c>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <__data_end+0xa>
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <I2C_0_master_operation+0x22>
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <__data_end+0xa>
 9a6:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_master_isr>
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	08 95       	ret
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	08 95       	ret

000009b2 <I2C_0_master_write>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 94 c2 04 	call	0x984	; 0x984 <I2C_0_master_operation>
}
 9b8:	08 95       	ret

000009ba <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
 9ba:	1f 92       	push	r1
 9bc:	0f 92       	push	r0
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	0f 92       	push	r0
 9c2:	11 24       	eor	r1, r1
 9c4:	2f 93       	push	r18
 9c6:	3f 93       	push	r19
 9c8:	4f 93       	push	r20
 9ca:	5f 93       	push	r21
 9cc:	6f 93       	push	r22
 9ce:	7f 93       	push	r23
 9d0:	8f 93       	push	r24
 9d2:	9f 93       	push	r25
 9d4:	af 93       	push	r26
 9d6:	bf 93       	push	r27
 9d8:	ef 93       	push	r30
 9da:	ff 93       	push	r31
	I2C_0_master_isr();
 9dc:	0e 94 22 04 	call	0x844	; 0x844 <I2C_0_master_isr>
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	08 95       	ret

00000a06 <timer_init>:
 *
 * \return Initialization status.
 */
int8_t timer_init() {

	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
 a06:	e0 e0       	ldi	r30, 0x00	; 0
 a08:	fa e0       	ldi	r31, 0x0A	; 10
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
 a0e:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTAEI_bm); // default value is already 0
 a10:	81 85       	ldd	r24, Z+9	; 0x09
 a12:	8e 7f       	andi	r24, 0xFE	; 254
 a14:	81 87       	std	Z+9, r24	; 0x09
	TCA0.SINGLE.PER = 13019; // How many ticks until OVerFlow.
 a16:	8b ed       	ldi	r24, 0xDB	; 219
 a18:	92 e3       	ldi	r25, 0x32	; 50
 a1a:	86 a3       	std	Z+38, r24	; 0x26
 a1c:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV256_gc | TCA_SINGLE_ENABLE_bm;
 a1e:	8d e0       	ldi	r24, 0x0D	; 13
 a20:	80 83       	st	Z, r24



	return 0;
}
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	08 95       	ret

00000a26 <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
 a26:	e0 e0       	ldi	r30, 0x00	; 0
 a28:	f8 e0       	ldi	r31, 0x08	; 8
 a2a:	8d e6       	ldi	r24, 0x6D	; 109
 a2c:	95 e0       	ldi	r25, 0x05	; 5
 a2e:	80 87       	std	Z+8, r24	; 0x08
 a30:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	86 83       	std	Z+6, r24	; 0x06
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	08 95       	ret

00000a3a <__subsf3>:
 a3a:	50 58       	subi	r21, 0x80	; 128

00000a3c <__addsf3>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	aa 27       	eor	r26, r26
 a40:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3x>
 a44:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_round>
 a48:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_pscA>
 a4c:	38 f0       	brcs	.+14     	; 0xa5c <__addsf3+0x20>
 a4e:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscB>
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3+0x20>
 a54:	39 f4       	brne	.+14     	; 0xa64 <__addsf3+0x28>
 a56:	9f 3f       	cpi	r25, 0xFF	; 255
 a58:	19 f4       	brne	.+6      	; 0xa60 <__addsf3+0x24>
 a5a:	26 f4       	brtc	.+8      	; 0xa64 <__addsf3+0x28>
 a5c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_nan>
 a60:	0e f4       	brtc	.+2      	; 0xa64 <__addsf3+0x28>
 a62:	e0 95       	com	r30
 a64:	e7 fb       	bst	r30, 7
 a66:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>

00000a6a <__addsf3x>:
 a6a:	e9 2f       	mov	r30, r25
 a6c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_split3>
 a70:	58 f3       	brcs	.-42     	; 0xa48 <__addsf3+0xc>
 a72:	ba 17       	cp	r27, r26
 a74:	62 07       	cpc	r22, r18
 a76:	73 07       	cpc	r23, r19
 a78:	84 07       	cpc	r24, r20
 a7a:	95 07       	cpc	r25, r21
 a7c:	20 f0       	brcs	.+8      	; 0xa86 <__addsf3x+0x1c>
 a7e:	79 f4       	brne	.+30     	; 0xa9e <__addsf3x+0x34>
 a80:	a6 f5       	brtc	.+104    	; 0xaea <__addsf3x+0x80>
 a82:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_zero>
 a86:	0e f4       	brtc	.+2      	; 0xa8a <__addsf3x+0x20>
 a88:	e0 95       	com	r30
 a8a:	0b 2e       	mov	r0, r27
 a8c:	ba 2f       	mov	r27, r26
 a8e:	a0 2d       	mov	r26, r0
 a90:	0b 01       	movw	r0, r22
 a92:	b9 01       	movw	r22, r18
 a94:	90 01       	movw	r18, r0
 a96:	0c 01       	movw	r0, r24
 a98:	ca 01       	movw	r24, r20
 a9a:	a0 01       	movw	r20, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	ff 27       	eor	r31, r31
 aa0:	59 1b       	sub	r21, r25
 aa2:	99 f0       	breq	.+38     	; 0xaca <__addsf3x+0x60>
 aa4:	59 3f       	cpi	r21, 0xF9	; 249
 aa6:	50 f4       	brcc	.+20     	; 0xabc <__addsf3x+0x52>
 aa8:	50 3e       	cpi	r21, 0xE0	; 224
 aaa:	68 f1       	brcs	.+90     	; 0xb06 <__addsf3x+0x9c>
 aac:	1a 16       	cp	r1, r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	a2 2f       	mov	r26, r18
 ab2:	23 2f       	mov	r18, r19
 ab4:	34 2f       	mov	r19, r20
 ab6:	44 27       	eor	r20, r20
 ab8:	58 5f       	subi	r21, 0xF8	; 248
 aba:	f3 cf       	rjmp	.-26     	; 0xaa2 <__addsf3x+0x38>
 abc:	46 95       	lsr	r20
 abe:	37 95       	ror	r19
 ac0:	27 95       	ror	r18
 ac2:	a7 95       	ror	r26
 ac4:	f0 40       	sbci	r31, 0x00	; 0
 ac6:	53 95       	inc	r21
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__addsf3x+0x52>
 aca:	7e f4       	brtc	.+30     	; 0xaea <__addsf3x+0x80>
 acc:	1f 16       	cp	r1, r31
 ace:	ba 0b       	sbc	r27, r26
 ad0:	62 0b       	sbc	r22, r18
 ad2:	73 0b       	sbc	r23, r19
 ad4:	84 0b       	sbc	r24, r20
 ad6:	ba f0       	brmi	.+46     	; 0xb06 <__addsf3x+0x9c>
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	a1 f0       	breq	.+40     	; 0xb04 <__addsf3x+0x9a>
 adc:	ff 0f       	add	r31, r31
 ade:	bb 1f       	adc	r27, r27
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	c2 f7       	brpl	.-16     	; 0xad8 <__addsf3x+0x6e>
 ae8:	0e c0       	rjmp	.+28     	; 0xb06 <__addsf3x+0x9c>
 aea:	ba 0f       	add	r27, r26
 aec:	62 1f       	adc	r22, r18
 aee:	73 1f       	adc	r23, r19
 af0:	84 1f       	adc	r24, r20
 af2:	48 f4       	brcc	.+18     	; 0xb06 <__addsf3x+0x9c>
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f7 95       	ror	r31
 afe:	9e 3f       	cpi	r25, 0xFE	; 254
 b00:	08 f0       	brcs	.+2      	; 0xb04 <__addsf3x+0x9a>
 b02:	b0 cf       	rjmp	.-160    	; 0xa64 <__addsf3+0x28>
 b04:	93 95       	inc	r25
 b06:	88 0f       	add	r24, r24
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__addsf3x+0xa2>
 b0a:	99 27       	eor	r25, r25
 b0c:	ee 0f       	add	r30, r30
 b0e:	97 95       	ror	r25
 b10:	87 95       	ror	r24
 b12:	08 95       	ret

00000b14 <__fixunssfsi>:
 b14:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_splitA>
 b18:	88 f0       	brcs	.+34     	; 0xb3c <__fixunssfsi+0x28>
 b1a:	9f 57       	subi	r25, 0x7F	; 127
 b1c:	98 f0       	brcs	.+38     	; 0xb44 <__fixunssfsi+0x30>
 b1e:	b9 2f       	mov	r27, r25
 b20:	99 27       	eor	r25, r25
 b22:	b7 51       	subi	r27, 0x17	; 23
 b24:	b0 f0       	brcs	.+44     	; 0xb52 <__fixunssfsi+0x3e>
 b26:	e1 f0       	breq	.+56     	; 0xb60 <__fixunssfsi+0x4c>
 b28:	66 0f       	add	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	1a f0       	brmi	.+6      	; 0xb38 <__fixunssfsi+0x24>
 b32:	ba 95       	dec	r27
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__fixunssfsi+0x14>
 b36:	14 c0       	rjmp	.+40     	; 0xb60 <__fixunssfsi+0x4c>
 b38:	b1 30       	cpi	r27, 0x01	; 1
 b3a:	91 f0       	breq	.+36     	; 0xb60 <__fixunssfsi+0x4c>
 b3c:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_zero>
 b40:	b1 e0       	ldi	r27, 0x01	; 1
 b42:	08 95       	ret
 b44:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_zero>
 b48:	67 2f       	mov	r22, r23
 b4a:	78 2f       	mov	r23, r24
 b4c:	88 27       	eor	r24, r24
 b4e:	b8 5f       	subi	r27, 0xF8	; 248
 b50:	39 f0       	breq	.+14     	; 0xb60 <__fixunssfsi+0x4c>
 b52:	b9 3f       	cpi	r27, 0xF9	; 249
 b54:	cc f3       	brlt	.-14     	; 0xb48 <__fixunssfsi+0x34>
 b56:	86 95       	lsr	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b3 95       	inc	r27
 b5e:	d9 f7       	brne	.-10     	; 0xb56 <__fixunssfsi+0x42>
 b60:	3e f4       	brtc	.+14     	; 0xb70 <__fixunssfsi+0x5c>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <__floatunsisf>:
 b72:	e8 94       	clt
 b74:	09 c0       	rjmp	.+18     	; 0xb88 <__floatsisf+0x12>

00000b76 <__floatsisf>:
 b76:	97 fb       	bst	r25, 7
 b78:	3e f4       	brtc	.+14     	; 0xb88 <__floatsisf+0x12>
 b7a:	90 95       	com	r25
 b7c:	80 95       	com	r24
 b7e:	70 95       	com	r23
 b80:	61 95       	neg	r22
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	99 23       	and	r25, r25
 b8a:	a9 f0       	breq	.+42     	; 0xbb6 <__floatsisf+0x40>
 b8c:	f9 2f       	mov	r31, r25
 b8e:	96 e9       	ldi	r25, 0x96	; 150
 b90:	bb 27       	eor	r27, r27
 b92:	93 95       	inc	r25
 b94:	f6 95       	lsr	r31
 b96:	87 95       	ror	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	f1 11       	cpse	r31, r1
 ba0:	f8 cf       	rjmp	.-16     	; 0xb92 <__floatsisf+0x1c>
 ba2:	fa f4       	brpl	.+62     	; 0xbe2 <__floatsisf+0x6c>
 ba4:	bb 0f       	add	r27, r27
 ba6:	11 f4       	brne	.+4      	; 0xbac <__floatsisf+0x36>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	1b c0       	rjmp	.+54     	; 0xbe2 <__floatsisf+0x6c>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <__floatsisf+0x6c>
 bb6:	88 23       	and	r24, r24
 bb8:	11 f0       	breq	.+4      	; 0xbbe <__floatsisf+0x48>
 bba:	96 e9       	ldi	r25, 0x96	; 150
 bbc:	11 c0       	rjmp	.+34     	; 0xbe0 <__floatsisf+0x6a>
 bbe:	77 23       	and	r23, r23
 bc0:	21 f0       	breq	.+8      	; 0xbca <__floatsisf+0x54>
 bc2:	9e e8       	ldi	r25, 0x8E	; 142
 bc4:	87 2f       	mov	r24, r23
 bc6:	76 2f       	mov	r23, r22
 bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__floatsisf+0x5e>
 bca:	66 23       	and	r22, r22
 bcc:	71 f0       	breq	.+28     	; 0xbea <__floatsisf+0x74>
 bce:	96 e8       	ldi	r25, 0x86	; 134
 bd0:	86 2f       	mov	r24, r22
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	2a f0       	brmi	.+10     	; 0xbe2 <__floatsisf+0x6c>
 bd8:	9a 95       	dec	r25
 bda:	66 0f       	add	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	da f7       	brpl	.-10     	; 0xbd8 <__floatsisf+0x62>
 be2:	88 0f       	add	r24, r24
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__fp_inf>:
 bec:	97 f9       	bld	r25, 7
 bee:	9f 67       	ori	r25, 0x7F	; 127
 bf0:	80 e8       	ldi	r24, 0x80	; 128
 bf2:	70 e0       	ldi	r23, 0x00	; 0
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	08 95       	ret

00000bf8 <__fp_nan>:
 bf8:	9f ef       	ldi	r25, 0xFF	; 255
 bfa:	80 ec       	ldi	r24, 0xC0	; 192
 bfc:	08 95       	ret

00000bfe <__fp_pscA>:
 bfe:	00 24       	eor	r0, r0
 c00:	0a 94       	dec	r0
 c02:	16 16       	cp	r1, r22
 c04:	17 06       	cpc	r1, r23
 c06:	18 06       	cpc	r1, r24
 c08:	09 06       	cpc	r0, r25
 c0a:	08 95       	ret

00000c0c <__fp_pscB>:
 c0c:	00 24       	eor	r0, r0
 c0e:	0a 94       	dec	r0
 c10:	12 16       	cp	r1, r18
 c12:	13 06       	cpc	r1, r19
 c14:	14 06       	cpc	r1, r20
 c16:	05 06       	cpc	r0, r21
 c18:	08 95       	ret

00000c1a <__fp_round>:
 c1a:	09 2e       	mov	r0, r25
 c1c:	03 94       	inc	r0
 c1e:	00 0c       	add	r0, r0
 c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_round+0xc>
 c22:	88 23       	and	r24, r24
 c24:	52 f0       	brmi	.+20     	; 0xc3a <__fp_round+0x20>
 c26:	bb 0f       	add	r27, r27
 c28:	40 f4       	brcc	.+16     	; 0xc3a <__fp_round+0x20>
 c2a:	bf 2b       	or	r27, r31
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0x18>
 c2e:	60 ff       	sbrs	r22, 0
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fp_round+0x20>
 c32:	6f 5f       	subi	r22, 0xFF	; 255
 c34:	7f 4f       	sbci	r23, 0xFF	; 255
 c36:	8f 4f       	sbci	r24, 0xFF	; 255
 c38:	9f 4f       	sbci	r25, 0xFF	; 255
 c3a:	08 95       	ret

00000c3c <__fp_split3>:
 c3c:	57 fd       	sbrc	r21, 7
 c3e:	90 58       	subi	r25, 0x80	; 128
 c40:	44 0f       	add	r20, r20
 c42:	55 1f       	adc	r21, r21
 c44:	59 f0       	breq	.+22     	; 0xc5c <__fp_splitA+0x10>
 c46:	5f 3f       	cpi	r21, 0xFF	; 255
 c48:	71 f0       	breq	.+28     	; 0xc66 <__fp_splitA+0x1a>
 c4a:	47 95       	ror	r20

00000c4c <__fp_splitA>:
 c4c:	88 0f       	add	r24, r24
 c4e:	97 fb       	bst	r25, 7
 c50:	99 1f       	adc	r25, r25
 c52:	61 f0       	breq	.+24     	; 0xc6c <__fp_splitA+0x20>
 c54:	9f 3f       	cpi	r25, 0xFF	; 255
 c56:	79 f0       	breq	.+30     	; 0xc76 <__fp_splitA+0x2a>
 c58:	87 95       	ror	r24
 c5a:	08 95       	ret
 c5c:	12 16       	cp	r1, r18
 c5e:	13 06       	cpc	r1, r19
 c60:	14 06       	cpc	r1, r20
 c62:	55 1f       	adc	r21, r21
 c64:	f2 cf       	rjmp	.-28     	; 0xc4a <__fp_split3+0xe>
 c66:	46 95       	lsr	r20
 c68:	f1 df       	rcall	.-30     	; 0xc4c <__fp_splitA>
 c6a:	08 c0       	rjmp	.+16     	; 0xc7c <__fp_splitA+0x30>
 c6c:	16 16       	cp	r1, r22
 c6e:	17 06       	cpc	r1, r23
 c70:	18 06       	cpc	r1, r24
 c72:	99 1f       	adc	r25, r25
 c74:	f1 cf       	rjmp	.-30     	; 0xc58 <__fp_splitA+0xc>
 c76:	86 95       	lsr	r24
 c78:	71 05       	cpc	r23, r1
 c7a:	61 05       	cpc	r22, r1
 c7c:	08 94       	sec
 c7e:	08 95       	ret

00000c80 <__fp_zero>:
 c80:	e8 94       	clt

00000c82 <__fp_szero>:
 c82:	bb 27       	eor	r27, r27
 c84:	66 27       	eor	r22, r22
 c86:	77 27       	eor	r23, r23
 c88:	cb 01       	movw	r24, r22
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__mulsf3>:
 c8e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsf3x>
 c92:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_round>
 c96:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_pscA>
 c9a:	38 f0       	brcs	.+14     	; 0xcaa <__mulsf3+0x1c>
 c9c:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscB>
 ca0:	20 f0       	brcs	.+8      	; 0xcaa <__mulsf3+0x1c>
 ca2:	95 23       	and	r25, r21
 ca4:	11 f0       	breq	.+4      	; 0xcaa <__mulsf3+0x1c>
 ca6:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 caa:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_nan>
 cae:	11 24       	eor	r1, r1
 cb0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>

00000cb4 <__mulsf3x>:
 cb4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_split3>
 cb8:	70 f3       	brcs	.-36     	; 0xc96 <__mulsf3+0x8>

00000cba <__mulsf3_pse>:
 cba:	95 9f       	mul	r25, r21
 cbc:	c1 f3       	breq	.-16     	; 0xcae <__mulsf3+0x20>
 cbe:	95 0f       	add	r25, r21
 cc0:	50 e0       	ldi	r21, 0x00	; 0
 cc2:	55 1f       	adc	r21, r21
 cc4:	62 9f       	mul	r22, r18
 cc6:	f0 01       	movw	r30, r0
 cc8:	72 9f       	mul	r23, r18
 cca:	bb 27       	eor	r27, r27
 ccc:	f0 0d       	add	r31, r0
 cce:	b1 1d       	adc	r27, r1
 cd0:	63 9f       	mul	r22, r19
 cd2:	aa 27       	eor	r26, r26
 cd4:	f0 0d       	add	r31, r0
 cd6:	b1 1d       	adc	r27, r1
 cd8:	aa 1f       	adc	r26, r26
 cda:	64 9f       	mul	r22, r20
 cdc:	66 27       	eor	r22, r22
 cde:	b0 0d       	add	r27, r0
 ce0:	a1 1d       	adc	r26, r1
 ce2:	66 1f       	adc	r22, r22
 ce4:	82 9f       	mul	r24, r18
 ce6:	22 27       	eor	r18, r18
 ce8:	b0 0d       	add	r27, r0
 cea:	a1 1d       	adc	r26, r1
 cec:	62 1f       	adc	r22, r18
 cee:	73 9f       	mul	r23, r19
 cf0:	b0 0d       	add	r27, r0
 cf2:	a1 1d       	adc	r26, r1
 cf4:	62 1f       	adc	r22, r18
 cf6:	83 9f       	mul	r24, r19
 cf8:	a0 0d       	add	r26, r0
 cfa:	61 1d       	adc	r22, r1
 cfc:	22 1f       	adc	r18, r18
 cfe:	74 9f       	mul	r23, r20
 d00:	33 27       	eor	r19, r19
 d02:	a0 0d       	add	r26, r0
 d04:	61 1d       	adc	r22, r1
 d06:	23 1f       	adc	r18, r19
 d08:	84 9f       	mul	r24, r20
 d0a:	60 0d       	add	r22, r0
 d0c:	21 1d       	adc	r18, r1
 d0e:	82 2f       	mov	r24, r18
 d10:	76 2f       	mov	r23, r22
 d12:	6a 2f       	mov	r22, r26
 d14:	11 24       	eor	r1, r1
 d16:	9f 57       	subi	r25, 0x7F	; 127
 d18:	50 40       	sbci	r21, 0x00	; 0
 d1a:	9a f0       	brmi	.+38     	; 0xd42 <__mulsf3_pse+0x88>
 d1c:	f1 f0       	breq	.+60     	; 0xd5a <__mulsf3_pse+0xa0>
 d1e:	88 23       	and	r24, r24
 d20:	4a f0       	brmi	.+18     	; 0xd34 <__mulsf3_pse+0x7a>
 d22:	ee 0f       	add	r30, r30
 d24:	ff 1f       	adc	r31, r31
 d26:	bb 1f       	adc	r27, r27
 d28:	66 1f       	adc	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	91 50       	subi	r25, 0x01	; 1
 d30:	50 40       	sbci	r21, 0x00	; 0
 d32:	a9 f7       	brne	.-22     	; 0xd1e <__mulsf3_pse+0x64>
 d34:	9e 3f       	cpi	r25, 0xFE	; 254
 d36:	51 05       	cpc	r21, r1
 d38:	80 f0       	brcs	.+32     	; 0xd5a <__mulsf3_pse+0xa0>
 d3a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 d3e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	e4 f3       	brlt	.-8      	; 0xd3e <__mulsf3_pse+0x84>
 d46:	98 3e       	cpi	r25, 0xE8	; 232
 d48:	d4 f3       	brlt	.-12     	; 0xd3e <__mulsf3_pse+0x84>
 d4a:	86 95       	lsr	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f7 95       	ror	r31
 d54:	e7 95       	ror	r30
 d56:	9f 5f       	subi	r25, 0xFF	; 255
 d58:	c1 f7       	brne	.-16     	; 0xd4a <__mulsf3_pse+0x90>
 d5a:	fe 2b       	or	r31, r30
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__divmodhi4>:
 d68:	97 fb       	bst	r25, 7
 d6a:	07 2e       	mov	r0, r23
 d6c:	16 f4       	brtc	.+4      	; 0xd72 <__divmodhi4+0xa>
 d6e:	00 94       	com	r0
 d70:	07 d0       	rcall	.+14     	; 0xd80 <__divmodhi4_neg1>
 d72:	77 fd       	sbrc	r23, 7
 d74:	09 d0       	rcall	.+18     	; 0xd88 <__divmodhi4_neg2>
 d76:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__udivmodhi4>
 d7a:	07 fc       	sbrc	r0, 7
 d7c:	05 d0       	rcall	.+10     	; 0xd88 <__divmodhi4_neg2>
 d7e:	3e f4       	brtc	.+14     	; 0xd8e <__divmodhi4_exit>

00000d80 <__divmodhi4_neg1>:
 d80:	90 95       	com	r25
 d82:	81 95       	neg	r24
 d84:	9f 4f       	sbci	r25, 0xFF	; 255
 d86:	08 95       	ret

00000d88 <__divmodhi4_neg2>:
 d88:	70 95       	com	r23
 d8a:	61 95       	neg	r22
 d8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d8e <__divmodhi4_exit>:
 d8e:	08 95       	ret

00000d90 <__udivmodsi4>:
 d90:	a1 e2       	ldi	r26, 0x21	; 33
 d92:	1a 2e       	mov	r1, r26
 d94:	aa 1b       	sub	r26, r26
 d96:	bb 1b       	sub	r27, r27
 d98:	fd 01       	movw	r30, r26
 d9a:	0d c0       	rjmp	.+26     	; 0xdb6 <__udivmodsi4_ep>

00000d9c <__udivmodsi4_loop>:
 d9c:	aa 1f       	adc	r26, r26
 d9e:	bb 1f       	adc	r27, r27
 da0:	ee 1f       	adc	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	a2 17       	cp	r26, r18
 da6:	b3 07       	cpc	r27, r19
 da8:	e4 07       	cpc	r30, r20
 daa:	f5 07       	cpc	r31, r21
 dac:	20 f0       	brcs	.+8      	; 0xdb6 <__udivmodsi4_ep>
 dae:	a2 1b       	sub	r26, r18
 db0:	b3 0b       	sbc	r27, r19
 db2:	e4 0b       	sbc	r30, r20
 db4:	f5 0b       	sbc	r31, r21

00000db6 <__udivmodsi4_ep>:
 db6:	66 1f       	adc	r22, r22
 db8:	77 1f       	adc	r23, r23
 dba:	88 1f       	adc	r24, r24
 dbc:	99 1f       	adc	r25, r25
 dbe:	1a 94       	dec	r1
 dc0:	69 f7       	brne	.-38     	; 0xd9c <__udivmodsi4_loop>
 dc2:	60 95       	com	r22
 dc4:	70 95       	com	r23
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	9b 01       	movw	r18, r22
 dcc:	ac 01       	movw	r20, r24
 dce:	bd 01       	movw	r22, r26
 dd0:	cf 01       	movw	r24, r30
 dd2:	08 95       	ret

00000dd4 <__udivmodhi4>:
 dd4:	aa 1b       	sub	r26, r26
 dd6:	bb 1b       	sub	r27, r27
 dd8:	51 e1       	ldi	r21, 0x11	; 17
 dda:	07 c0       	rjmp	.+14     	; 0xdea <__udivmodhi4_ep>

00000ddc <__udivmodhi4_loop>:
 ddc:	aa 1f       	adc	r26, r26
 dde:	bb 1f       	adc	r27, r27
 de0:	a6 17       	cp	r26, r22
 de2:	b7 07       	cpc	r27, r23
 de4:	10 f0       	brcs	.+4      	; 0xdea <__udivmodhi4_ep>
 de6:	a6 1b       	sub	r26, r22
 de8:	b7 0b       	sbc	r27, r23

00000dea <__udivmodhi4_ep>:
 dea:	88 1f       	adc	r24, r24
 dec:	99 1f       	adc	r25, r25
 dee:	5a 95       	dec	r21
 df0:	a9 f7       	brne	.-22     	; 0xddc <__udivmodhi4_loop>
 df2:	80 95       	com	r24
 df4:	90 95       	com	r25
 df6:	bc 01       	movw	r22, r24
 df8:	cd 01       	movw	r24, r26
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
